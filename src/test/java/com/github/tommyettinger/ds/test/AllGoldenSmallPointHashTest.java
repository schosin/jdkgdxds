/*
 * Copyright (c) 2022 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package com.github.tommyettinger.ds.test;

import com.github.tommyettinger.digital.Base;
import com.github.tommyettinger.digital.BitConversion;
import com.github.tommyettinger.ds.IntIntOrderedMap;
import com.github.tommyettinger.ds.IntSet;
import com.github.tommyettinger.ds.ObjectSet;
import com.github.tommyettinger.ds.support.sort.IntComparators;
import org.checkerframework.checker.nullness.qual.NonNull;

import java.io.IOException;
import java.util.Arrays;

import static com.github.tommyettinger.ds.test.PileupTest.*;

/**
 * Using the original 31-based simple hashing, this fails to get under its threshold every time.
 * But, with a no-multiplication Rosenberg-Strong-based hash, it gets:
 * 12 problem multipliers in total, 500 likely good multipliers in total.
 * Lowest collisions : 0
 * Highest collisions: 669208
 * Lowest pileup     : 0
 * Highest pileup    : 49
 * Measuring collisions differently (any collision at any size counts), we get:
 * 42 problem multipliers in total, 470 likely good multipliers in total.
 * Lowest collisions : 45789
 * Highest collisions: 619463
 * Lowest pileup     : 1
 * Highest pileup    : 65
 * Adjusting the threshold to be much higher, and switching Point2.hashCode() to be what GridPoint2 uses:
 * 108 problem multipliers in total, 404 likely good multipliers in total.
 * Lowest collisions : 5212535
 * Highest collisions: 6699757
 * Lowest pileup     : 16
 * Highest pileup    : 121
 * With changing hm re-enabled, using (hm * shift >>> 5) & 511 :
 * 231 problem multipliers in total, 281 likely good multipliers in total.
 * Lowest collisions : 5231727
 * Highest collisions: 5692089
 * Lowest pileup     : 16
 * Highest pileup    : 16
 * With changing disabled again, but using only 256 known good multipliers:
 * 0 problem multipliers in total, 512 likely good multipliers in total.
 * Lowest collisions : 5212535
 * Highest collisions: 5485200
 * Lowest pileup     : 16
 * Highest pileup    : 16
 * With changing enabled, same 256 known good:
 * 0 problem multipliers in total, 512 likely good multipliers in total.
 * Lowest collisions : 5215499
 * Highest collisions: 5257751
 * Lowest pileup     : 16
 * Highest pileup    : 16
 * With changing not mattering because only 1 multiplier (0x0000C2E5) is used:
 * (This is extremely slow for some reason. It takes over a minute to get through the first of 512 iterations.)
 */
public class AllGoldenSmallPointHashTest {

	public static void main(String[] args) throws IOException {
//		// has 512 int multipliers, each using 21 bits or fewer.
//		final int[] GOOD = new int[]{
//				0x0008A323, 0x0016B78B, 0x001B001F, 0x00062097, 0x001420EF, 0x000C5845, 0x000A98E9, 0x00100F2D,
//				0x001B5B85, 0x00188A29, 0x001A46CB, 0x0010D27F, 0x001FAA51, 0x000DC877, 0x0011BD83, 0x000361C9,
//				0x001D099F, 0x0003D857, 0x00129A73, 0x000289D9, 0x000D696F, 0x0003045B, 0x000D21FF, 0x00120901,
//				0x000BBD77, 0x0006447F, 0x000AFFBD, 0x00027AC1, 0x000C2305, 0x0006A293, 0x001CABF9, 0x0003EE61,
//				0x0015F7D7, 0x0002B2C1, 0x001FF3C3, 0x001D26D5, 0x00153C51, 0x00020793, 0x001386E3, 0x001902FD,
//				0x001B34A7, 0x001BA161, 0x00176FA3, 0x00035FF9, 0x0007D407, 0x00064E61, 0x0019A187, 0x000765A3,
//				0x001CF39D, 0x0011C4F7, 0x00146451, 0x00150FA7, 0x0019F4CD, 0x00188F97, 0x001B3A91, 0x0010DCDF,
//				0x00111327, 0x001F9733, 0x000BC2CD, 0x000D93D1, 0x000378D1, 0x000766C7, 0x001758BF, 0x0010B99D,
//				0x000CE08B, 0x00088283, 0x001999FD, 0x0012B39B, 0x000769BD, 0x00086905, 0x00066747, 0x001309BD,
//				0x00144307, 0x0002F0DF, 0x00157BF1, 0x001C7995, 0x000EB717, 0x0017DEFB, 0x000891D1, 0x000BE167,
//				0x000C831D, 0x000FABA3, 0x000C05F3, 0x00026BDD, 0x001BA92B, 0x0001F18D, 0x0001965B, 0x0002D3DD,
//				0x000710F7, 0x0007A799, 0x000A1CF9, 0x000CD355, 0x000D5EB9, 0x00023BA1, 0x0012C1ED, 0x000C2B4B,
//				0x0018D3EF, 0x00054BEB, 0x001D13B3, 0x00136B49, 0x0016F6DF, 0x00073CAF, 0x000FDF79, 0x000DB8ED,
//				0x001C9423, 0x0003A4A3, 0x001B40A1, 0x0001F877, 0x000F5F23, 0x0008771F, 0x00030D23, 0x000405BB,
//				0x0011D6F9, 0x000E09F3, 0x00180135, 0x001B2CBF, 0x0010D611, 0x00110397, 0x000C0215, 0x000A6247,
//				0x0015A755, 0x00141B41, 0x0007B839, 0x001A72BF, 0x000445B1, 0x0008768D, 0x00190AB5, 0x0003B76D,
//				0x000673E5, 0x0017CFFB, 0x000B405D, 0x00090BD1, 0x000C0883, 0x00034F41, 0x001CC5BF, 0x00022D79,
//				0x001A01DF, 0x00102623, 0x00084C93, 0x0019AE8F, 0x0018B845, 0x00103359, 0x0001AA3B, 0x001C8933,
//				0x0014F445, 0x000CB2A9, 0x0005632D, 0x00080757, 0x001E013B, 0x000E1BFD, 0x00173C65, 0x0018B6CD,
//				0x0001D6EB, 0x000369CF, 0x0008CC55, 0x0001E4D1, 0x0008F2E7, 0x001AA4C5, 0x000A7C3D, 0x001AA4D1,
//				0x0018B677, 0x0003A981, 0x0002DAD7, 0x00096AF7, 0x00103203, 0x00162A75, 0x000DD3A3, 0x001B9B83,
//				0x00167237, 0x00058207, 0x001157E5, 0x001FC0DF, 0x001DDFF1, 0x0001E4F1, 0x000DF417, 0x001547EF,
//				0x000995C9, 0x000AD5A7, 0x000921B1, 0x000CE6B1, 0x001C0CDD, 0x000FD0CB, 0x001DC963, 0x0003E07B,
//				0x000A8407, 0x000BFA17, 0x000CA493, 0x0008B9C1, 0x00033E89, 0x0002DEAD, 0x0002A05B, 0x00042C7D,
//				0x000FEFD1, 0x00184985, 0x001C7407, 0x000354B7, 0x000318C9, 0x00028ADD, 0x001271AF, 0x001B6A17,
//				0x001634F9, 0x0014A449, 0x001D26A7, 0x00106187, 0x000A905D, 0x0010D4CF, 0x00091701, 0x0004441B,
//				0x0010390B, 0x0008CC31, 0x0019F541, 0x0018FA0F, 0x000DEA59, 0x00127443, 0x000E4D37, 0x00146961,
//				0x0001CE33, 0x000EE1A3, 0x000896C5, 0x0006EE7B, 0x001B500D, 0x00168985, 0x0002825D, 0x000B4287,
//				0x000E5EE7, 0x000F4685, 0x000262EB, 0x000C995F, 0x00146EAF, 0x001DCB3B, 0x0002E5BB, 0x000A0B13,
//				0x00160B85, 0x0011E3B3, 0x0010AB01, 0x000FE4C7, 0x000FBCDD, 0x00188B43, 0x001E965F, 0x001B6923,
//				0x001B3A77, 0x001063A1, 0x00100C75, 0x00028E11, 0x0001D6CD, 0x001BA32D, 0x0005BF15, 0x00135BC5,
//				0x00111A65, 0x0008B185, 0x0019616D, 0x001EAEDD, 0x001C5D75, 0x000C0C37, 0x000DD757, 0x0005AE85,
//				0x0012DF0D, 0x001FFB83, 0x000A1005, 0x00025C09, 0x00154313, 0x0019B0E9, 0x001D1E69, 0x0007144F,
//				0x0001C6C5, 0x000D3D09, 0x00117417, 0x0018CB25, 0x000F476D, 0x001F6D71, 0x0009361F, 0x0018C277,
//				0x0007E375, 0x000C5B7F, 0x000F4E7D, 0x0004E05D, 0x001A3B8B, 0x00038959, 0x000BE3D5, 0x0010701B,
//				0x00186CE5, 0x000CCC53, 0x00057827, 0x000F44C9, 0x000A059B, 0x00099205, 0x000CC623, 0x000A3E5F,
//				0x001C0D37, 0x00088E51, 0x00070F97, 0x001108A3, 0x000A819D, 0x00124907, 0x001BC1AB, 0x00087153,
//				0x00151855, 0x0004F583, 0x001C51BB, 0x000D5F13, 0x0019E119, 0x000B4909, 0x000911FD, 0x000E0D11,
//				0x00089DB7, 0x0008092F, 0x0017D6D9, 0x0014B43D, 0x001CBB8B, 0x000E5A41, 0x000B56F1, 0x0003DF43,
//				0x0006F08B, 0x0016F285, 0x001BF05D, 0x001D1043, 0x001B290F, 0x000577AD, 0x0008343B, 0x001E3C17,
//				0x001E1223, 0x0007A0F5, 0x001AB7E3, 0x00030A8B, 0x0007F6E1, 0x0012FA37, 0x0013D1DF, 0x001F4FAF,
//				0x000D7F79, 0x0002D5A1, 0x001150E9, 0x001C3CB5, 0x000CA8D9, 0x0007A34D, 0x0002C03F, 0x001F2389,
//				0x001AD321, 0x000D58D3, 0x0014C44D, 0x00029885, 0x001FFFB3, 0x001E25D5, 0x00032DFF, 0x0011FC41,
//				0x00166563, 0x001AF485, 0x0001B52B, 0x0008BFC5, 0x0003F0CD, 0x000FFE6B, 0x00116AA7, 0x0016C953,
//				0x00175ED5, 0x00141A31, 0x0003EA05, 0x00107A41, 0x00028607, 0x000B447D, 0x000EB457, 0x000B83DF,
//				0x001990C9, 0x00133AB3, 0x0019226B, 0x000EDA07, 0x001F49F1, 0x0002B8D9, 0x000D70A5, 0x0002B9A5,
//				0x001C8711, 0x00043435, 0x0011ECB5, 0x001F21E1, 0x00035737, 0x00169D93, 0x0008EC93, 0x0004D1C1,
//				0x00118A8F, 0x00165869, 0x0016D181, 0x00026727, 0x0015F617, 0x00195265, 0x001C2163, 0x000447F1,
//				0x0004306D, 0x00143B95, 0x0001D20D, 0x001851BB, 0x00160333, 0x001B5ED1, 0x00154FC7, 0x000E3B1D,
//				0x000368E7, 0x0014E06B, 0x0015593D, 0x000949CD, 0x00018E87, 0x0002BD05, 0x0004EE13, 0x00186935,
//				0x00122EE3, 0x0011757F, 0x001030B1, 0x0018ACF7, 0x00159B2B, 0x0017A4FB, 0x000B5E8F, 0x000EC6B9,
//				0x001E0FCB, 0x0015D4F7, 0x00091145, 0x001CC863, 0x00040779, 0x00193483, 0x00178CD3, 0x0019D835,
//				0x0005F98D, 0x001E0DCB, 0x000374CB, 0x000CEBF3, 0x001CED6D, 0x0011C565, 0x000FBCB7, 0x001F1BF1,
//				0x00095E39, 0x0001AC05, 0x001A9929, 0x000D6B05, 0x001BAE5F, 0x00029C35, 0x00107CCB, 0x0003B601,
//				0x001F5A8B, 0x0017EFCD, 0x001F676B, 0x0004E87F, 0x001DE0C9, 0x001501AF, 0x0010F989, 0x001C1A0F,
//				0x0015BBDB, 0x00032909, 0x00152F2D, 0x00049B77, 0x0008E6CF, 0x001C9509, 0x000F06B5, 0x00137111,
//				0x0018E625, 0x00093D3D, 0x0008DE77, 0x0016C021, 0x0003FBA9, 0x00156FE7, 0x0017B01B, 0x000D6EF7,
//				0x00028C59, 0x0008559F, 0x00086F05, 0x001FFF89, 0x00182F05, 0x00065805, 0x001004E3, 0x0007BB75,
//				0x0011F4C3, 0x000760FB, 0x0017375D, 0x0013E5DF, 0x001473FF, 0x0017AF01, 0x000733E9, 0x0017F3A3,
//				0x000E4F75, 0x001185B3, 0x000E6E7F, 0x0012CD29, 0x001C326B, 0x001C62FD, 0x0005D86B, 0x0008EDA5,
//				0x00138ED9, 0x00056DD3, 0x000C5165, 0x0016DA65, 0x0001BF4D, 0x00033347, 0x0001BE49, 0x00022551,
//				0x00026FB3, 0x001D2291, 0x00128817, 0x000EBCE1, 0x000EF8C9, 0x00060AA1, 0x00021A71, 0x001F19E7,
//				0x000CEB49, 0x0003472F, 0x00117C81, 0x0011D97B, 0x000CD899, 0x00199D4D, 0x000814DD, 0x001FF2D3,
//				0x000F4001, 0x000206F5, 0x000F7ED7, 0x001DDD5D, 0x00044EFF, 0x0019FDE5, 0x001C28F5, 0x0011AA9B,
//		};

		// has 256 int multipliers, each using 21 bits or fewer, each repeated for compatibility.
		final int[] GOOD = new int[]{
				0x00197D75, 0x001F6AE3, 0x0006F5F3, 0x001C4C3D, 0x001AD501, 0x000D36F9, 0x0012D2B7, 0x001A0E77,
				0x000AB569, 0x00114C3D, 0x000348A3, 0x0009C255, 0x000DFD75, 0x000B1E47, 0x001254FF, 0x000F52B7,
				0x00150E77, 0x000C5205, 0x0015EAE3, 0x001A4987, 0x00012207, 0x0002E173, 0x00116CE9, 0x000CC255,
				0x00020427, 0x0001A649, 0x000D7B2F, 0x000694D9, 0x00073B83, 0x0004D4FF, 0x000765D5, 0x0003B6F9,
				0x000AD4FF, 0x000B8E77, 0x0000D339, 0x0005ADC3, 0x0011ADC3, 0x000BC057, 0x001A52B7, 0x00130427,
				0x00165205, 0x001FBCA7, 0x000DB569, 0x00075501, 0x000C3B83, 0x000B4987, 0x001854FF, 0x00087571,
				0x0002AA37, 0x00016173, 0x0008D2B7, 0x0012BB83, 0x001F7BB3, 0x0002C8D7, 0x0008C057, 0x001C14D9,
				0x0010C8A3, 0x0006F6F7, 0x00182649, 0x00013713, 0x0016CC17, 0x000BB569, 0x0011FBB3, 0x0000F6F7,
				0x000F2207, 0x0012A649, 0x0009D501, 0x001AA649, 0x001D1E47, 0x0010ECE9, 0x001548A3, 0x000D7D75,
				0x000DADC3, 0x00014C3D, 0x000750DB, 0x00153569, 0x001365D5, 0x0006B569, 0x000DEA89, 0x000CD501,
				0x0000C2E5, 0x00105339, 0x001D42E5, 0x001FC057, 0x000568E7, 0x000F2649, 0x0009D0DB, 0x00060415,
				0x0007F6F7, 0x0014C987, 0x0016CD59, 0x00138427, 0x001C42E5, 0x000A6173, 0x001BCC3D, 0x000D4EC9,
				0x0018E8E7, 0x00098427, 0x000FD5EB, 0x0000E173, 0x0017E5D5, 0x000D2119, 0x001F2207, 0x00010427,
				0x001DFD75, 0x00104D59, 0x0012B713, 0x001FE8E7, 0x0019C057, 0x00168415, 0x000DAA37, 0x001355EB,
				0x000952B7, 0x001F9497, 0x001C52B7, 0x001F85C7, 0x000CE5D5, 0x00037B2F, 0x0000EA89, 0x000CC057,
				0x00112DC3, 0x0014C4BF, 0x001DC8A3, 0x00084987, 0x001DE173, 0x001950DB, 0x0012F571, 0x00076AE3,
				0x00093B83, 0x00064C3D, 0x0019B6F9, 0x000FD2B7, 0x000EA649, 0x000F8427, 0x001594D9, 0x000A4987,
				0x000C9497, 0x001BC2E5, 0x000FD4FF, 0x000B6AE3, 0x00084C17, 0x0000CC3D, 0x001D52B7, 0x00114D59,
				0x001055EB, 0x001CD205, 0x00127BB3, 0x0016B569, 0x0015ADC3, 0x00130E77, 0x0001ADC3, 0x00150427,
				0x0003A649, 0x0019FB2F, 0x001DD2B7, 0x00172119, 0x001DA207, 0x00086173, 0x001B85C7, 0x00044057,
				0x0014E8E7, 0x000FFB2F, 0x00044255, 0x00078427, 0x00164987, 0x001D2207, 0x00192207, 0x00134C3D,
				0x0014C057, 0x0011E173, 0x00182A37, 0x0019C987, 0x00195501, 0x001DC987, 0x00077571, 0x000FF6F7,
				0x0005E8E7, 0x0017D205, 0x001DCEC9, 0x0007C987, 0x000E50DB, 0x001344BF, 0x00034987, 0x0008F571,
				0x00014DD1, 0x0009C7FB, 0x00110B4F, 0x0016D71B, 0x0009CDD1, 0x000F0B4F, 0x0012C7FB, 0x000647FB,
				0x0018936F, 0x0008CDD1, 0x0007936F, 0x001DC7FB, 0x000E936F, 0x001DD71B, 0x000C4DD1, 0x0004571B,
				0x0013571B, 0x001D136F, 0x000C8B4F, 0x0001571B, 0x001E136F, 0x000CC7FB, 0x0014548F, 0x000514C9,
				0x001EF7C7, 0x001A0EB9, 0x001E0CAF, 0x000C00F5, 0x0012EAF1, 0x0006CAB9, 0x00011663, 0x0005CBF3,
				0x00137C2F, 0x001438A1, 0x001CE795, 0x001AE9E7, 0x001D7E5D, 0x00081CB1, 0x000B6F35, 0x0004A781,
				0x00195695, 0x001BCB61, 0x00098BD7, 0x0000E53B, 0x0010F71F, 0x00139CEB, 0x00102733, 0x0017D14F,
				0x0001409D, 0x001470FD, 0x0018E671, 0x000E00C9, 0x001D66FF, 0x000BFDE7, 0x0010F17B, 0x000EDD93,
				0x00138D13, 0x0019C7D7, 0x0012CC4F, 0x0009443F, 0x00179D2F, 0x00014BA7, 0x0018FC4F, 0x001D653D,
				0x00157861, 0x0012BD63, 0x001F6795, 0x00022BC5, 0x0012548F, 0x000AF8A9, 0x0015B873, 0x000A2AA9,
				0x00197D75, 0x001F6AE3, 0x0006F5F3, 0x001C4C3D, 0x001AD501, 0x000D36F9, 0x0012D2B7, 0x001A0E77,
				0x000AB569, 0x00114C3D, 0x000348A3, 0x0009C255, 0x000DFD75, 0x000B1E47, 0x001254FF, 0x000F52B7,
				0x00150E77, 0x000C5205, 0x0015EAE3, 0x001A4987, 0x00012207, 0x0002E173, 0x00116CE9, 0x000CC255,
				0x00020427, 0x0001A649, 0x000D7B2F, 0x000694D9, 0x00073B83, 0x0004D4FF, 0x000765D5, 0x0003B6F9,
				0x000AD4FF, 0x000B8E77, 0x0000D339, 0x0005ADC3, 0x0011ADC3, 0x000BC057, 0x001A52B7, 0x00130427,
				0x00165205, 0x001FBCA7, 0x000DB569, 0x00075501, 0x000C3B83, 0x000B4987, 0x001854FF, 0x00087571,
				0x0002AA37, 0x00016173, 0x0008D2B7, 0x0012BB83, 0x001F7BB3, 0x0002C8D7, 0x0008C057, 0x001C14D9,
				0x0010C8A3, 0x0006F6F7, 0x00182649, 0x00013713, 0x0016CC17, 0x000BB569, 0x0011FBB3, 0x0000F6F7,
				0x000F2207, 0x0012A649, 0x0009D501, 0x001AA649, 0x001D1E47, 0x0010ECE9, 0x001548A3, 0x000D7D75,
				0x000DADC3, 0x00014C3D, 0x000750DB, 0x00153569, 0x001365D5, 0x0006B569, 0x000DEA89, 0x000CD501,
				0x0000C2E5, 0x00105339, 0x001D42E5, 0x001FC057, 0x000568E7, 0x000F2649, 0x0009D0DB, 0x00060415,
				0x0007F6F7, 0x0014C987, 0x0016CD59, 0x00138427, 0x001C42E5, 0x000A6173, 0x001BCC3D, 0x000D4EC9,
				0x0018E8E7, 0x00098427, 0x000FD5EB, 0x0000E173, 0x0017E5D5, 0x000D2119, 0x001F2207, 0x00010427,
				0x001DFD75, 0x00104D59, 0x0012B713, 0x001FE8E7, 0x0019C057, 0x00168415, 0x000DAA37, 0x001355EB,
				0x000952B7, 0x001F9497, 0x001C52B7, 0x001F85C7, 0x000CE5D5, 0x00037B2F, 0x0000EA89, 0x000CC057,
				0x00112DC3, 0x0014C4BF, 0x001DC8A3, 0x00084987, 0x001DE173, 0x001950DB, 0x0012F571, 0x00076AE3,
				0x00093B83, 0x00064C3D, 0x0019B6F9, 0x000FD2B7, 0x000EA649, 0x000F8427, 0x001594D9, 0x000A4987,
				0x000C9497, 0x001BC2E5, 0x000FD4FF, 0x000B6AE3, 0x00084C17, 0x0000CC3D, 0x001D52B7, 0x00114D59,
				0x001055EB, 0x001CD205, 0x00127BB3, 0x0016B569, 0x0015ADC3, 0x00130E77, 0x0001ADC3, 0x00150427,
				0x0003A649, 0x0019FB2F, 0x001DD2B7, 0x00172119, 0x001DA207, 0x00086173, 0x001B85C7, 0x00044057,
				0x0014E8E7, 0x000FFB2F, 0x00044255, 0x00078427, 0x00164987, 0x001D2207, 0x00192207, 0x00134C3D,
				0x0014C057, 0x0011E173, 0x00182A37, 0x0019C987, 0x00195501, 0x001DC987, 0x00077571, 0x000FF6F7,
				0x0005E8E7, 0x0017D205, 0x001DCEC9, 0x0007C987, 0x000E50DB, 0x001344BF, 0x00034987, 0x0008F571,
				0x00014DD1, 0x0009C7FB, 0x00110B4F, 0x0016D71B, 0x0009CDD1, 0x000F0B4F, 0x0012C7FB, 0x000647FB,
				0x0018936F, 0x0008CDD1, 0x0007936F, 0x001DC7FB, 0x000E936F, 0x001DD71B, 0x000C4DD1, 0x0004571B,
				0x0013571B, 0x001D136F, 0x000C8B4F, 0x0001571B, 0x001E136F, 0x000CC7FB, 0x0014548F, 0x000514C9,
				0x001EF7C7, 0x001A0EB9, 0x001E0CAF, 0x000C00F5, 0x0012EAF1, 0x0006CAB9, 0x00011663, 0x0005CBF3,
				0x00137C2F, 0x001438A1, 0x001CE795, 0x001AE9E7, 0x001D7E5D, 0x00081CB1, 0x000B6F35, 0x0004A781,
				0x00195695, 0x001BCB61, 0x00098BD7, 0x0000E53B, 0x0010F71F, 0x00139CEB, 0x00102733, 0x0017D14F,
				0x0001409D, 0x001470FD, 0x0018E671, 0x000E00C9, 0x001D66FF, 0x000BFDE7, 0x0010F17B, 0x000EDD93,
				0x00138D13, 0x0019C7D7, 0x0012CC4F, 0x0009443F, 0x00179D2F, 0x00014BA7, 0x0018FC4F, 0x001D653D,
				0x00157861, 0x0012BD63, 0x001F6795, 0x00022BC5, 0x0012548F, 0x000AF8A9, 0x0015B873, 0x000A2AA9,
		};

//		// Testing the single slowest multiplier I have found. I'm not sure why it's so slow.
//		final int[] GOOD = new int[512];
//		{
//			Arrays.fill(GOOD, 0x0000C2E5);;
//		}

//		// has 512 int multipliers, each using 21 bits or fewer.
//		final int[] GOOD = new int[]{
//				0x00197D75, 0x001F6AE3, 0x0006F5F3, 0x001C4C3D, 0x001AD501, 0x000D36F9, 0x0012D2B7, 0x001A0E77,
//				0x000AB569, 0x00114C3D, 0x0016CC3D, 0x000348A3, 0x0002F571, 0x0009C255, 0x000DF571, 0x000DFD75,
//				0x000B1E47, 0x001254FF, 0x000F52B7, 0x00150E77, 0x000C5205, 0x000B7D75, 0x0017D5EB, 0x0015EAE3,
//				0x001A4987, 0x00012207, 0x0002E173, 0x001FA119, 0x001A7B2F, 0x00116CE9, 0x000214D9, 0x000B85C7,
//				0x000CC255, 0x00102DC3, 0x00020427, 0x0001A649, 0x000D7B2F, 0x0010D2B7, 0x000694D9, 0x001865D5,
//				0x00073B83, 0x0004D4FF, 0x0018EAE3, 0x0013F5F3, 0x0016E5D5, 0x000765D5, 0x0003B6F9, 0x000AD4FF,
//				0x000B8E77, 0x0000D339, 0x0005ADC3, 0x00114C17, 0x001FE173, 0x0011ADC3, 0x000BC057, 0x001A52B7,
//				0x00130427, 0x00165205, 0x001FBCA7, 0x000EFB2F, 0x000BD4FF, 0x000B55EB, 0x0001B569, 0x001CA649,
//				0x00163713, 0x000DB569, 0x00018427, 0x00075501, 0x000C3B83, 0x000B4987, 0x001265D5, 0x000914D9,
//				0x001854FF, 0x0007C8D7, 0x0014D5EB, 0x00087571, 0x0002AA37, 0x001714D9, 0x00016173, 0x0008D2B7,
//				0x0012BB83, 0x001F7BB3, 0x0003A119, 0x0002C8D7, 0x0008C057, 0x0001E8E7, 0x00065205, 0x00024057,
//				0x001C14D9, 0x0010C8A3, 0x0006F6F7, 0x001E0E77, 0x00182649, 0x00013713, 0x0001F5F3, 0x0016CC17,
//				0x000BB569, 0x001ACC17, 0x0011FBB3, 0x0000F6F7, 0x0016FD75, 0x001BAA37, 0x0015B713, 0x000F2207,
//				0x0012A649, 0x000F5501, 0x00050415, 0x0009D501, 0x0001CC17, 0x001AA649, 0x0002C8A3, 0x001D1E47,
//				0x0010ECE9, 0x001548A3, 0x000D7D75, 0x000DADC3, 0x00014C3D, 0x0012C987, 0x0008C4BF, 0x00084057,
//				0x000750DB, 0x0019D0DB, 0x001B7571, 0x001D2DC3, 0x00153569, 0x001365D5, 0x000C1E47, 0x0006B569,
//				0x000DEA89, 0x0015D205, 0x000CD501, 0x0000C2E5, 0x00105339, 0x001D42E5, 0x001FC057, 0x000568E7,
//				0x000F2649, 0x000B0415, 0x0018CC17, 0x000D48A3, 0x000052B7, 0x000DD501, 0x0009D0DB, 0x00060415,
//				0x00043B83, 0x001848D7, 0x0007F6F7, 0x0014C987, 0x0016CD59, 0x0005BCA7, 0x00138427, 0x00024987,
//				0x001A8427, 0x001C42E5, 0x000B0427, 0x00035339, 0x000A6173, 0x001BCC3D, 0x000D4EC9, 0x000E94D9,
//				0x001A4C3D, 0x001D65D5, 0x0018E8E7, 0x001D5205, 0x000FEAE3, 0x00098427, 0x000FD5EB, 0x0000E173,
//				0x0017E5D5, 0x000D2119, 0x0019A207, 0x001955EB, 0x001F2207, 0x00010427, 0x001DFD75, 0x00104D59,
//				0x0012B713, 0x001FE8E7, 0x001EF6F7, 0x00104C17, 0x0019C057, 0x00168415, 0x001A48D7, 0x0011A649,
//				0x001BA207, 0x000DAA37, 0x001355EB, 0x000DC057, 0x000952B7, 0x0015AA37, 0x001F9497, 0x001C52B7,
//				0x001F85C7, 0x0003C8A3, 0x000CE5D5, 0x000FB713, 0x00037B2F, 0x0000EA89, 0x001BD0DB, 0x000CC057,
//				0x000AF571, 0x00112DC3, 0x0014C4BF, 0x00062A37, 0x001DC8A3, 0x0001D205, 0x000B48A3, 0x00084987,
//				0x001DE173, 0x001950DB, 0x0012F571, 0x00076AE3, 0x0005D5EB, 0x00093B83, 0x00064C3D, 0x0019B6F9,
//				0x000FD2B7, 0x00135501, 0x001442E5, 0x000CD205, 0x000EA649, 0x000F8427, 0x000014D9, 0x001155EB,
//				0x000B9497, 0x00094EC9, 0x001594D9, 0x00027D75, 0x001EE5D5, 0x00042119, 0x0001AA37, 0x000A4987,
//				0x000F5205, 0x001C5501, 0x000C9497, 0x001BC2E5, 0x000C55EB, 0x000FD4FF, 0x000B6AE3, 0x0013B6F9,
//				0x000848A3, 0x00022207, 0x00084C17, 0x0000CC3D, 0x001D52B7, 0x00114D59, 0x001ACEC9, 0x00047B2F,
//				0x000A2119, 0x00051E47, 0x000C48D7, 0x0013FD75, 0x001055EB, 0x001CD205, 0x00127BB3, 0x0016B569,
//				0x0012BCA7, 0x0015ADC3, 0x001A8415, 0x0008FBB3, 0x0009ECE9, 0x000A42E5, 0x001F3713, 0x00130E77,
//				0x00005339, 0x0001ADC3, 0x00150427, 0x0019EA89, 0x0003A649, 0x001E1497, 0x000BCC17, 0x000CD0DB,
//				0x000B4255, 0x0019FB2F, 0x001DD2B7, 0x000AD0DB, 0x000EAA37, 0x00146173, 0x00172119, 0x001DA207,
//				0x00086173, 0x0003D501, 0x001B85C7, 0x000E85C7, 0x00044057, 0x0014E8E7, 0x000FFB2F, 0x000AC987,
//				0x001A2119, 0x00021497, 0x00044255, 0x00078427, 0x000C52B7, 0x00074EC9, 0x00164987, 0x0004ECE9,
//				0x001D2207, 0x0012CC3D, 0x00192207, 0x0006CC3D, 0x00103713, 0x00134C3D, 0x000E3569, 0x0014C057,
//				0x0011E173, 0x00182A37, 0x0019C987, 0x00197B2F, 0x00195501, 0x001DC987, 0x000AF5F3, 0x0010FBB3,
//				0x001905C7, 0x00077571, 0x000FF6F7, 0x000314D9, 0x0005E8E7, 0x00145501, 0x0017CEC9, 0x0017D205,
//				0x000F85C7, 0x001F4EC9, 0x001876F7, 0x001DCEC9, 0x0007C987, 0x000942E5, 0x000BF571, 0x000442E5,
//				0x000E50DB, 0x001344BF, 0x00108E77, 0x001AB713, 0x00034987, 0x00180427, 0x000585C7, 0x0002B6F9,
//				0x0008F571, 0x00024EC9, 0x001FCDD1, 0x00014DD1, 0x001FC7FB, 0x001B136F, 0x0009C7FB, 0x00110B4F,
//				0x0016D71B, 0x0009CDD1, 0x0010CDD1, 0x000F0B4F, 0x0012C7FB, 0x00188B4F, 0x000547FB, 0x001AC7FB,
//				0x000647FB, 0x0018936F, 0x0008CDD1, 0x0014936F, 0x0019136F, 0x0007936F, 0x001DC7FB, 0x0014571B,
//				0x000E936F, 0x0004936F, 0x001B0B4F, 0x001DD71B, 0x0011CDD1, 0x0015C7FB, 0x000C4DD1, 0x0004571B,
//				0x0013571B, 0x000E4DD1, 0x00148B4F, 0x001D136F, 0x000C8B4F, 0x0001571B, 0x001E136F, 0x001C571B,
//				0x000747FB, 0x000CC7FB, 0x0014548F, 0x001A2AA9, 0x00118A27, 0x00101A2D, 0x000514C9, 0x001EF7C7,
//				0x00164ED1, 0x001A0EB9, 0x001E0CAF, 0x001FC43F, 0x000C00F5, 0x000F77C7, 0x000CD0CD, 0x000A14D1,
//				0x0012EAF1, 0x0006CAB9, 0x000C98E1, 0x00011663, 0x0005CBF3, 0x001AB53D, 0x00137C2F, 0x001438A1,
//				0x000F5DB3, 0x001CE795, 0x001A741B, 0x001AE9E7, 0x001040CF, 0x001D7E5D, 0x00081CB1, 0x000B6F35,
//				0x0004A781, 0x000EBF25, 0x00195695, 0x001BCB61, 0x001DF667, 0x00098BD7, 0x0010AC31, 0x001EF46B,
//				0x001DF7C7, 0x0000E53B, 0x001D0A5D, 0x0010F71F, 0x000F0475, 0x001F10DF, 0x00139CEB, 0x00102733,
//				0x0017D14F, 0x0001409D, 0x0007D7F3, 0x0011357D, 0x001BF855, 0x000937AD, 0x001470FD, 0x000B3DE1,
//				0x001C9C89, 0x0007A781, 0x0018E671, 0x00022A4F, 0x0008548F, 0x000D38A1, 0x000E00C9, 0x00028D31,
//				0x001D66FF, 0x00039F61, 0x000BFDE7, 0x0010F17B, 0x00023DE1, 0x00164B83, 0x000EDD93, 0x00138D13,
//				0x0012765B, 0x0019D823, 0x0007AB3F, 0x0019C7D7, 0x0008773B, 0x0012CC4F, 0x0006E53B, 0x00031FAD,
//				0x0009443F, 0x0015E81D, 0x000439B5, 0x000B35F7, 0x00179D2F, 0x0019A733, 0x00014BA7, 0x0018FC4F,
//				0x001D40FB, 0x0000286B, 0x001D653D, 0x00157861, 0x00138B11, 0x0012BD63, 0x0016AC31, 0x001F6795,
//				0x00022BC5, 0x00166795, 0x0012548F, 0x000AF8A9, 0x0015B873, 0x0017746B, 0x000A2AA9, 0x00088A73,
//				0x0014AC31, 0x00031F61, 0x0010653B, 0x000E5D93, 0x001514D1, 0x001A66F1, 0x001A3D49, 0x000B186F,
//				0x0017BB2B, 0x0014A2DD, 0x00152C2F, 0x000A66FF, 0x0007C54B, 0x001CBF25, 0x000C0A5D, 0x001EBA91,
//				0x000A98C5, 0x0015DD93, 0x001E5D43, 0x000F10DF, 0x00052807, 0x000B70FD, 0x00018615, 0x0005F855,
//				0x000A02C5, 0x000DBA8D, 0x0001F029, 0x00078A73, 0x0019B7AD, 0x001347D7, 0x001F44F1, 0x001970D5,
//		};
//

//		int[] GOLDEN_INTS = new int[MathTools.GOLDEN_LONGS.length];
//		for (int i = 0; i < GOLDEN_INTS.length; i++) {
//			GOLDEN_INTS[i] = (int)(MathTools.GOLDEN_LONGS[i] >>> 32) | 1;
//		}
		final Point2[] spiral = generatePointSpiral(LEN);

		IntSet collisions = new IntSet(LEN);
		for (int i = 0; i < LEN; i++) {
			collisions.add(spiral[i].hashCode());
		}
		System.out.println(collisions.size() + "/" + LEN + " hashes are unique.");
//		final long THRESHOLD = (long)(Math.pow(LEN, 11.0/10.0));
		final long THRESHOLD = (long)((double)LEN * (double) LEN / (0.125 * collisions.size()));

		final int[] problems = {0};
		final int COUNT = 512;//GOOD.length;
		IntIntOrderedMap good = new IntIntOrderedMap(COUNT);
		for (int x = 0; x < COUNT; x++) {
			good.put(GOOD[x], 0);
		}
//		int[] GOLDEN_INTS = good.keySet().toArray();
		long[] minMax = new long[]{Long.MAX_VALUE, Long.MIN_VALUE, Long.MAX_VALUE, Long.MIN_VALUE};
		short[] chosen = new short[512];
		for (int a = 0; a < COUNT; a++) {
			final int g = GOOD[a];
			{
				final int finalA = a;
				ObjectSet set = new ObjectSet(51, 0.6f) {
					long collisionTotal = 0;
					int longestPileup = 0;
					int hm = 0x17AD97;

					@Override
					protected int place (Object item) {
//						final int h = BitConversion.imul(item.hashCode(), hm);
//						return (h ^ h << 16) >>> shift;
//						return BitConversion.imul(item.hashCode(), hm) & mask; // UNUSABLE FOR VECTORS
//						final int h = item.hashCode();
//						return BitConversion.imul(h ^ h >>> 16, hm) >>> shift;
						return item.hashCode() * hm >>> shift;
//						return (item.hashCode() ^ 0x9E3779B9) * hm >>> shift;
					}

					@Override
					protected void addResize (@NonNull Object key) {
						Object[] keyTable = this.keyTable;
						for (int i = place(key), p = 0; ; i = i + 1 & mask) {
							if (keyTable[i] == null) {
								keyTable[i] = key;
								return;
							} else {
								collisionTotal++;
								longestPileup = Math.max(longestPileup, ++p);
								good.put(g, longestPileup);
							}
						}
					}

					@Override
					protected void resize (int newSize) {
						int oldCapacity = keyTable.length;
						threshold = (int)(newSize * loadFactor);
						mask = newSize - 1;
						shift = BitConversion.countLeadingZeros(mask) + 32;

						int index = (hm * shift >>> 5) & 511;
						chosen[index]++;
						hashMultiplier = hm = GOOD[index];
						Object[] oldKeyTable = keyTable;

						keyTable = new Object[newSize];

//						collisionTotal = 0;
						longestPileup = 0;

						if (size > 0) {
							for (int i = 0; i < oldCapacity; i++) {
								Object key = oldKeyTable[i];
								if (key != null) {addResize(key);}
							}
						}
						if (collisionTotal > THRESHOLD) {
//							System.out.printf("  WHOOPS!!!  Multiplier %08X on index %4d has %d collisions and %d pileup\n", hashMultiplier, finalA, collisionTotal, longestPileup);
							problems[0]++;
//							good.remove(g);
							throw new RuntimeException();
						}
					}

					@Override
					public void clear () {
						System.out.print(Base.BASE10.unsigned(finalA) + "/" + Base.BASE10.unsigned(COUNT) + ": Original 0x" + Base.BASE16.unsigned(g) + " on latest " + Base.BASE16.unsigned(hm));
						System.out.println(" gets total collisions: " + collisionTotal + ", PILEUP: " + good.get(g));
						minMax[0] = Math.min(minMax[0], collisionTotal);
						minMax[1] = Math.max(minMax[1], collisionTotal);
						minMax[2] = Math.min(minMax[2], good.get(g));
						minMax[3] = Math.max(minMax[3], good.get(g));
						super.clear();
					}

					@Override
					public void setHashMultiplier (int hashMultiplier) {
						this.hashMultiplier = hashMultiplier | 1;
						hm = this.hashMultiplier;
						resize(keyTable.length);
					}
				};
				set.setHashMultiplier(g);
				try {
					for (int i = 0, n = spiral.length; i < n; i++) {
						set.add(spiral[i]);
					}
				}catch (RuntimeException ignored){
					System.out.println(g + " FAILURE");
					continue;
				}
				set.clear();
			}
		}
		System.out.println("This used a threshold of " + THRESHOLD);
		System.out.println("Indices used: ");
		for (int y = 0, idx = 0; y < 32; y++) {
			for (int x = 0; x < 16; x++) {
				System.out.print(Base.BASE16.unsigned(chosen[idx++]) + " ");
			}
			System.out.println();
		}
		good.sortByValue(IntComparators.NATURAL_COMPARATOR);

		System.out.println("\n\nint[] GOOD_MULTIPLIERS = new int[]{");
		for (int i = 0; i < Integer.highestOneBit(good.size()); i++) {
			System.out.print("0x"+Base.BASE16.unsigned(good.keyAt(i))+"=0x"+Base.BASE16.unsigned(good.getAt(i))+", ");
			if((i & 7) == 7)
				System.out.println();
		}
		System.out.println("};\n");
		System.out.println(problems[0] + " problem multipliers in total, " + (COUNT - problems[0]) + " likely good multipliers in total.");
		System.out.println("Lowest collisions : " + minMax[0]);
		System.out.println("Highest collisions: " + minMax[1]);
		System.out.println("Lowest pileup     : " + minMax[2]);
		System.out.println("Highest pileup    : " + minMax[3]);
	}

}
